name: Build and Publish

on:
  push:
    branches:
      - main

env:
  EXECUTABLE_NAME: relm-test
  CARGO_KEEP_CONSOLE_ON_WINDOWS_FEATURE: windows-keep-console-window
  CARGO_EXTRA_BUILD_PARAMS: ''

jobs:
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions: write-all

    outputs:
      CARGO_PKG_VERSION: ${{ steps.version.outputs.CARGO_PKG_VERSION }}
      CARGO_PKG_PRERELEASE: ${{ steps.version.outputs.CARGO_PKG_PRERELEASE }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Determine Cargo version
        id: version
        run: |
          export CARGO_PKG_VERSION=$(awk -F '["=]' '/^\[(workspace.)?package\]/{p=1} p && /^version[[:space:]]*=/ {gsub(/"/, "", $3); print $3; p=0}' Cargo.toml)
          export CARGO_PKG_PRERELEASE=$([[ $CARGO_PKG_VERSION =~ -[0-9A-Za-z]+ ]] && echo "true" || echo "false")
          echo "CARGO_PKG_VERSION=${CARGO_PKG_VERSION}" >> $GITHUB_OUTPUT
          echo "CARGO_PKG_PRERELEASE=${CARGO_PKG_PRERELEASE}" >> $GITHUB_OUTPUT
      - name: Create Tag and Release
        uses: actions/create-release@latest
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.version.outputs.CARGO_PKG_VERSION }}
          release_name: v${{ steps.version.outputs.CARGO_PKG_VERSION }}
          prerelease: ${{ steps.version.outputs.CARGO_PKG_PRERELEASE }}

  build-gtk:
    name: Build and Publish (${{ matrix.platform.os_name }})
    runs-on: ${{ matrix.platform.os }}
    container:
      image: ${{ matrix.platform.container }}
    permissions: write-all
    needs: create-release
    strategy:
      fail-fast: false
      matrix:
        platform:
          - os_name: Linux
            os: ubuntu-latest
            container: ghcr.io/gtk-rs/gtk4-rs/gtk4:latest
            file_suffix: linux-x86_64
          - os_name: Windows
            os: windows-latest
            file_suffix: windows-x86_64
          - os_name: Mac
            os: macos-latest
            file_suffix: mac-x86_64

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Get latest Win-GTK4 build
        if: matrix.platform.os_name == 'Windows'
        id: wingtk-install
        shell: bash
        run: |
          REPO_OWNER="wingtk"  # Replace with the owner of the repository
          REPO_NAME="gvsbuild" # Replace with the name of the repository
          ASSET_PREFIX="GTK4"  # The prefix of the asset you want to download

          mkdir -p "${ASSET_PREFIX}"
          cd "${ASSET_PREFIX}" || exit 1

          # Get the latest release
          RELEASE_INFO=$(curl -s \
          "https://api.github.com/repos/$REPO_OWNER/$REPO_NAME/releases/latest")

          # Extract the asset URL that starts with the specified prefix
          ASSET_URL=$(echo "$RELEASE_INFO" | jq -r --arg ASSET_PREFIX "$ASSET_PREFIX" \
          '.assets[] | select(.name | startswith($ASSET_PREFIX)) | .url')

          if [ -z "$ASSET_URL" ]; then
          echo "No asset found starting with '$ASSET_PREFIX'!"
          exit 1
          fi

          # Download the asset
          curl -L \
          -H "Accept: application/octet-stream" \
          "$ASSET_URL" -o "${ASSET_PREFIX}_asset.zip"

          echo "Downloaded asset: ${ASSET_PREFIX}_asset.zip"

          unzip "${ASSET_PREFIX}_asset.zip"
          rm -f "${ASSET_PREFIX}_asset.zip"
          rm -rf "include/" "python/" "wheels/"
          BASE_DIR=$(pwd)
          echo "BASE_DIR=${BASE_DIR}" >> $GITHUB_OUTPUT

      - name: Install Mac dependencies
        if: matrix.platform.os_name == 'Mac'
        run: brew install gtk4 libadwaita

      - name: Restore Cargo cache
        uses: actions/cache/restore@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Build
        if: matrix.platform.os_name != 'Windows'
        run: |
          cargo build --release ${{ env.CARGO_EXTRA_BUILD_PARAMS }}
          strip target/release/${{ env.EXECUTABLE_NAME }}
          mv target/release/${{ env.EXECUTABLE_NAME }} target/release/${{ env.EXECUTABLE_NAME }}-${{ matrix.platform.file_suffix }}

      - name: Build
        if: matrix.platform.os_name == 'Windows'
        shell: base
        run: |
          PATH="${{ steps.wingtk-install.outputs.BASE_DIR }}/bin:$PATH"
          LIB="${{ steps.wingtk-install.outputs.BASE_DIR }}/lib:$LIB"
          INCLUDE="${{ steps.wingtk-install.outputs.BASE_DIR }}/include:${{ steps.wingtk-install.outputs.BASE_DIR }}/include/cairo:${{ steps.wingtk-install.outputs.BASE_DIR }}/include/glib-2.0:${{ steps.wingtk-install.outputs.BASE_DIR }}/include/gobject-introspection-1.0:${{ steps.wingtk-install.outputs.BASE_DIR }}/lib/glib-2.0/include:$INCLUDE"
          PKG_CONFIG_PATH="${{ steps.wingtk-install.outputs.BASE_DIR }}/lib/pkgconfig:$PKG_CONFIG_PATH"

          mkdir -p bundle/bin
          cargo build --release ${{ env.CARGO_EXTRA_BUILD_PARAMS }}
          mv target/release/${{ env.EXECUTABLE_NAME }}.exe bundle/bin/${{ env.EXECUTABLE_NAME }}-${{ matrix.platform.file_suffix }}.exe
          cargo build --release --features ${{ env.CARGO_KEEP_CONSOLE_ON_WINDOWS_FEATURE }} ${{ env.CARGO_EXTRA_BUILD_PARAMS }}
          mv target/release/${{ env.EXECUTABLE_NAME }}.exe bundle/bin/${{ env.EXECUTABLE_NAME }}-console-${{ matrix.platform.file_suffix }}.exe

          rm -rf ${{ steps.wingtk-install.outputs.BASE_DIR }}/include
          cp ${{ steps.wingtk-install.outputs.BASE_DIR }}/* bundle/

      - name: Save Cargo cache
        uses: actions/cache/save@v3
        with:
          path: |
            ~/.cargo/bin/
            ~/.cargo/registry/index/
            ~/.cargo/registry/cache/
            ~/.cargo/git/db/
            target/
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Archive release
        if: matrix.platform.os_name == 'Windows'
        uses: thedoctor0/zip-release@0.7.1
        with:
          type: zip
          path: bundle
          filename: ${{ env.EXECUTABLE_NAME }}-${{ matrix.platform.file_suffix }}.zip

      - name: Publish release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            target/release/${{ env.EXECUTABLE_NAME }}-${{ matrix.platform.file_suffix }}
            ${{ env.EXECUTABLE_NAME }}-${{ matrix.platform.file_suffix }}.zip
          fail_on_unmatched_files: false
          tag_name: ${{ needs.create-release.outputs.CARGO_PKG_VERSION }}
          prerelease: ${{ needs.create-release.outputs.CARGO_PKG_PRERELEASE }}
